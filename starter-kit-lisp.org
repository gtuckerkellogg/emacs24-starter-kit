
#+TITLE: Starter Kit Lisp
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: results silent

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].


* Starter Kit Lisp
Support for editing list dialects including [[* Emacs Lisp][Emacs Lisp]], [[* Scheme][Scheme]],
[[* Common Lisp][Common Lisp]], and [[* Clojure][Clojure]].

** Define keys
   :PROPERTIES:
   :CUSTOM_ID: keys
   :END:
#+name: starter-kit-define-lisp-keys
#+begin_src emacs-lisp 
  ;(define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)

  ;; (define-key lisp-mode-shared-map (kbd "C-c l") "lambda") 
  ; (define-key lisp-mode-shared-map (kbd "C-c C-p") 'slime-pprint-eval-last-expression) 
  (define-key lisp-mode-shared-map (kbd "RET")
    'reindent-then-newline-and-indent)

  ;(define-key lisp-mode-shared-map (kbd "C-\\") 'lisp-complete-symbol)

  ;; (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)
#+end_src

** Paredit
   :PROPERTIES:
   :CUSTOM_ID: paredit
   :END:
[[http://www.emacswiki.org/emacs/ParEdit][Paredit]] might seem weird at first, but it really makes writing lisp a
much more comfortable experience.  This is especially useful in
combination with the sexp movement functions (=C-M-f= forward, =C-M-b=
back, =C-M-u= up, =C-M-d= down)

#+begin_src emacs-lisp
      (use-package paredit
        :ensure t
        :config
        (defun turn-on-paredit () (paredit-mode +1))
        (defun turn-off-paredit () (paredit-mode -1))
        (add-hook 'emacs-lisp-mode-hook 'turn-on-paredit))

#+end_src

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

#+begin_src emacs-lisp

  (use-package elisp-slime-nav
    :config
    (defun turn-on-elisp-slime-nav-mode () (elisp-slime-nav-mode t))
    (add-hook 'emacs-lisp-mode-hook 'turn-on-elisp-slime-nav-mode))

    
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'run-starter-kit-coding-hook)
  (add-hook 'emacs-lisp-mode-hook 'starter-kit-remove-elc-on-save)

  (define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)

  (defun starter-kit-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

#+end_src

** Clojure
   :PROPERTIES:
   :CUSTOM_ID: clojure
   :END:

#+begin_src emacs-lisp
  (use-package clojure-mode
    :init
    (add-hook 'clojure-mode-hook #'run-starter-kit-coding-hook)
    (add-hook 'clojure-mode-hook #'turn-on-paredit))
#+end_src


** Scheme
   :PROPERTIES:
   :CUSTOM_ID: scheme
   :END:

#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook 'run-starter-kit-coding-hook)
;; (add-hook 'scheme-mode-hook 'idle-highlight)
#+end_src

** Common Lisp
   :PROPERTIES:
   :CUSTOM_ID: common-lisp
   :END:

#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook 'run-starter-kit-coding-hook)
;; (add-hook 'lisp-mode-hook 'idle-highlight)
(add-hook 'lisp-mode-hook 'turn-on-paredit)
#+end_src
