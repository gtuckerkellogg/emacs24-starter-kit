#+TITLE:     Greg Tucker-Kellogg's Emacs configuration

* Front matter                                                :ignoreheading:
#+AUTHOR:    Greg Tucker-Kellogg
#+DESCRIPTION:
#+PROPERTY: header-args :tangle yes
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+PROPERTY: results silent  
#+PROPERTY: tangle yes 
#+LATEX_HEADER: \usepackage{gtuckerkellogg} 

#+BEGIN_SRC emacs-lisp :results silent :exports none :eval yes
          (defun my-org-confirm-babel-evaluate (lang body)
            (not (string= lang "latex")))  ; don't ask for ditaa
          (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

* General information

#+name: me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Greg Tucker-Kellogg"
        user-mail-address "dbsgtk@gmail.com")
  (require 'cl)
  (require 'use-package)

#+END_SRC

#+RESULTS: me
: use-package

* General configuration

** Enable minibuffer completion

#+begin_src emacs-lisp
  (icomplete-mode 1)
  (setq scroll-step 0)
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
  (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-defun)
#+end_src

#+RESULTS:
: eval-defun

** French spacing
I'm trying to wean myself off the old school double spacing for
sentence ending.  Also in LaTeX.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

#+RESULTS:














* Some functions

These are almost trivial functions, but I find them useful

#+BEGIN_SRC emacs-lisp
  (defun expand-directory-name (d)
    (expand-file-name (concat d "/")))
  
  (defun  gtk/emacs-subdir (d)
    (expand-directory-name (concat user-emacs-directory d )))
  
  (defun turn-off-cua-mode ()
    (cua-mode -1))

(defun switch-to-minibuffer-window ()
  "switch to minibuffer window (if active)"
  (interactive)
  (when (active-minibuffer-window)
    (select-window (active-minibuffer-window))))
(global-set-key (kbd "<f7>") 'switch-to-minibuffer-window)

#+END_SRC

#+RESULTS:
: switch-to-minibuffer-window


* File configuration

** First we have some of my file organization

#name: other-lisp
#+begin_src emacs-lisp
(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
  (defvar dropbox-root  
   (convert-standard-filename "~/Dropbox/")
    "This is where Dropbox should be mounted on all of my systems")
    
  (setq user-emacs-directory (convert-standard-filename "~/.emacs.d/"))
    
  (defvar my-elisp-dir (convert-standard-filename  
                        (concat dropbox-root "emacs/lisp/"))   
    "Where I will keep some extra personal elisp stuff")
#+end_src

#+RESULTS:
: my-elisp-dir

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them. Other dependencies are provided by Emacs 24.

#+BEGIN_SRC emacs-lisp 
  (setq package-archives
        '(("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
          ("melpa"       . "http://melpa.milkbox.net/packages/")
          ("gnu"         . "http://elpa.gnu.org/packages/")))
  (package-initialize)
  (setq package-check-signature nil)

#+END_SRC


#+begin_src emacs-lisp
  (dolist (package '(cider flycheck kibit-mode autoinsert visual-regexp
                           dired+ js2-mode typopunct rainbow-delimiters 
                           ess r-autoyas gist expand-region multiple-cursors 
                           virtualenvwrapper smartparens))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Load the desired starter kit packages before my remaining customization

#+name: starter-kit
#+begin_src emacs-lisp  
  (starter-kit-load "misc")  
  (starter-kit-load "misc-recommended") 
  (starter-kit-load "lisp")
  (starter-kit-load "bindings") 
  (starter-kit-load "ruby") 
  (starter-kit-load "perl") 
  (starter-kit-load "org")
  (starter-kit-load "eshell")
  (setq debug-on-error t)
#+end_src

** Popwin!

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :config (progn
            (popwin-mode 1)))
#+END_SRC

#+begin_src emacs-lisp
  (use-package bm
    :ensure t
    :bind* (("C-c =" . bm-toggle)
           ("C-c [" . bm-previous)
           ("C-c ]" . bm-next)))
#+end_src

** contrib

I want to make sure the contrib directory is available, since I use an
updated version of htmlize.el to fontify the exported code

#+name contribs
#+begin_src emacs-lisp
(setq custom-theme-directory  (gtk/emacs-subdir "themes"))

(defun disable-all-themes ()
  "disable all active themes."
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defadvice load-theme (before disable-themes-first activate)
  (disable-all-themes))
#+end_src

#+begin_src emacs-lisp

  (use-package cider
    :pin melpa-stable
    :init
    (add-hook 'clojure-mode-hook #'cider-mode)
    (autoload 'cider--make-result-overlay "cider-overlays")
    (defun endless/eval-overlay (value point)
      (cider--make-result-overlay (format "%S" value)
        :where point
        :duration 'command)
      value)
    (advice-add 'eval-region :around
                (lambda (f beg end &rest r)
                  (endless/eval-overlay
                   (apply f beg end r)
                   end)))
    (advice-add 'eval-last-sexp :filter-return
                (lambda (r)
                  (endless/eval-overlay r (point))))
    (advice-add 'eval-defun :filter-return
                (lambda (r)
                  (endless/eval-overlay
                   r
                   (save-excursion
                     (end-of-defun)
                     (point)))))
    :config
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'paredit-mode)
    (add-hook 'cider-mode-hook 'projectile-mode)
    (setq cider-repl-print-length 100
          nrepl-hide-special-buffers t
          cider-prompt-save-file-on-load nil
          cider-repl-result-prefix ";; => "
          cider-repl-popup-stacktraces t
          cider-auto-select-error-buffer t)

    :bind (("C-c i" . cider-inspect-last-result)))

    ;;(use-package kibit-mode
    ;;    :bind ("C-c C-n" . nil))

    (use-package flycheck
      :config
      (setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers))
      (add-hook 'clojure-mode-hook 'flycheck-mode)
      (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src



* Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure    projectile
    :config    (projectile-global-mode t)
    :diminish   projectile-mode)

;(persp-mode)
;(require 'persp-projectile)
#+END_SRC

* LaTeX


#+begin_src emacs-lisp
  (setq-default TeX-master t)
  (setq TeX-PDF-mode t)

  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (defun getpackage ()
    (interactive)
    (search-backward "\\")
    (re-search-forward "usepackage[^{}]*{" nil t)
    (while (looking-at "\\s-*,*\\([a-zA-Z0-9]+\\)")
      (re-search-forward "\\s-*,*\\([a-zA-Z0-9]+\\)" nil 1)
      (save-excursion
        (find-file-other-window (replace-regexp-in-string "[\n\r ]*" "" (shell-command-to-string (concat "kpsewhich " (match-string 1) ".sty")))))))
  #+end_src


* Some modes

** Lualatex

#+BEGIN_SRC emacs-lisp :eval yes
  (use-package lua-mode
    :ensure t
    :mode (("\\.lua\\'" . lua-mode)))
#+END_SRC

#+RESULTS:

** handle text mode and markdown 

#+BEGIN_SRC emacs-lisp :eval yes

          (use-package markdown-mode
                :ensure t
                :commands (markdown-mode gfm-mode)
                :mode (("README\\.md\\'" . gfm-mode)
                       ("\\.md\\'" . markdown-mode)
                       ("\\.markdown\\'" . markdown-mode))
                :init
                (setq markdown-command "pandoc")
                :bind ("C-c C-r" . reftex-citation))



    (add-hook 'markdown-mode-hook 'turn-off-auto-fill)

     (defun my-buffer-face-mode-variable ()
       "Set font to a variable width (proportional) fonts in current buffer"
       (interactive)
       (setq buffer-face-mode-face '(:family "Bitstream Charter"))
       (buffer-face-mode))

     (defun my-buffer-face-mode-fixed ()
       "Sets a fixed width (monospace) font in current buffer"
       (interactive)
       (setq buffer-face-mode-face '(:family "Anonymous Pro"))
       (buffer-face-mode))

    ;; use a variable font for markdown mode

     (add-hook 'markdown-mode-hook 'my-buffer-face-mode-variable)

     ;; Control + scroll to change font type
     (global-set-key [C-mouse-4] 'my-buffer-face-mode-fixed)
     (global-set-key [C-mouse-5] 'my-buffer-face-mode-variable)

     (global-set-key [C-M-prior] 'my-buffer-face-mode-fixed)
     (global-set-key [C-M-next] 'my-buffer-face-mode-variable)

     ;; Shift + scroll to change font size
     (global-set-key [S-mouse-4] 'text-scale-increase)
     (global-set-key [S-mouse-5] 'text-scale-decrease)


          (use-package pandoc-mode
            :hook markdown-mode
            :config 'pandoc-load-default-settings)


          ;;(add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)

          (use-package visual-line-mode
            :hook markdown-mode)

  (use-package reftex-mode
     :hook markdown-mode)


        (use-package visual-fill-column-mode
            :hook markdown-mode)

            (add-hook 'text-mode-hook 'turn-on-auto-fill)

            (use-package autoinsert
              :config
                (setq auto-insert-directory (gtk/emacs-subdir "insert")))

          ;(add-hook 'markdown-mode-hook 'pandoc-mode)



#+END_SRC

#+RESULTS:
: t

** Make dired remove some junk in default view with dired-x

#+begin_src emacs-lisp
  (use-package dired+
    :config
    ;(setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$")
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (add-to-list 'dired-omit-extensions ".pyg") 
    (add-to-list 'dired-omit-extensions ".fls") 
    (add-to-list 'dired-omit-extensions ".fdb_latexmk") 
    (add-to-list 'dired-omit-extensions ".run.xml") 
    (add-hook 'dired-mode-hook 'dired-omit-mode))


#+end_src

** Discoverability 
#+begin_src emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    :diminish which-key-mode)

#+end_src

** Require js2-mode

#+begin_src emacs-lisp
  (require 'js2-mode)
#+end_src

* Spelling

#+begin_src emacs-lisp
  (use-package flyspell
    :init
    (bind-key "S-<f8>" 'flyspell-mode)
    :config
    (defun gtk/flyspell-check-next-error ()
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word))
    (bind-keys :map flyspell-mode-map
               ("<f8>" . gtk/flyspell-check-next-error)
               ("M-S-<f8>" . flyspell-prog-mode))
    (setq ispell-extra-args nil)
    (setq ispell-program-name "hunspell")
    (add-to-list 'ispell-hunspell-dict-paths-alist
                 '("en_MED" "/usr/share/hunspell/en_MED.dic"))
    (add-to-list 'ispell-hunspell-dict-paths-alist
                 '("en_med_glut" "/usr/share/hunspell/en_med_glut.dic"))
    (setq ispell-dictionary "en_GB,en_med_glut")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_GB,en_med_glut")
    (ispell-hunspell-add-multi-dic "en_US,en_med_glut"))





#+end_src

* Key bindings

I have some keys that I'd like to be always bound

#+name: gtk-keys
#+BEGIN_SRC emacs-lisp
    
    (global-set-key "\C-x\C-m" 'execute-extended-command)
    (global-set-key "\C-c\C-m" 'execute-extended-command)
    
  ;  (global-set-key "\C-w" 'backward-kill-word)
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'copy-region-as-kill)
    
    (global-set-key (kbd "C-c q") 'auto-fill-mode)

  (use-package magit
    :config
    (bind-key "C-c m" 'magit-status))

    
#+END_SRC

* Org mode 

The ever present Org mode is where most of my note-taking, GTD-ing,
and writing takes place.

** General Org options

Where the Org files go

#+begin_src emacs-lisp   
  (setq org-directory (expand-directory-name (concat dropbox-root "_support/org")))
#+end_src  


Org miscellany 

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-off-auto-fill)  
  (add-hook 'org-mode-hook (lambda () (visual-line-mode 1) ))
  (add-hook 'org-mode-hook 'turn-off-cua-mode)  
  (setq org-insert-mode-line-in-empty-file t)
  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-completion-use-ido nil)
;(setq ido-file-extensions-order '(".org" ".txt" ".py" ".el" "tex" ".cnf"))
  (setq org-outline-path-complete-in-steps nil)
#+end_src

*** Getting smart quotes

#+begin_src emacs-lisp

  (use-package typopunct
    :config
    (typopunct-change-language 'english t)
    (defun typopunct-off () (interactive) (typopunct-mode -1))
    (defun typopunct-on ()  (interactive) (typopunct-mode t))
    (add-hook 'org-mode-hook 'typopunct-on))
#+end_src


** Org Modules

#+begin_src emacs-lisp
  (add-to-list 'org-modules 'ox-latex)
  (add-to-list 'org-modules 'ox-odt)
  (add-to-list 'org-modules 'org-agenda)
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-export-backends 'beamer :append)
  (add-to-list 'org-export-backends 'odt :append)

#+end_src

I want the habits display to be a little to the right. I'll use the
Chinese character 今 for today, and a ☺ for completed habits

#+begin_src emacs-lisp
  (setq  org-habit-completed-glyph 9786 
         org-habit-graph-column 80
         org-habit-show-habits-only-for-today t 
         org-habit-today-glyph 20170  
         org-hide-leading-stars nil
         org-pretty-entities nil)
#+end_src

** Org file locations

#+name: file-locs
#+begin_src emacs-lisp
     (defvar my/inbox
       (expand-file-name (concat dropbox-root "/_inbox/inbox.org"))
         "My inbox")
     (setq org-default-notes-file my/inbox)

     (defvar my/organizer
        (expand-file-name (concat org-directory "/organizer.org")) 
          "My main tasks list")
     
     (defvar my/journal
       (expand-file-name (concat dropbox-root "/_inbox/journal.org"))
         "My journal")
#+end_src

** The agenda

#+begin_src emacs-lisp
  (setq org-agenda-files (expand-file-name (concat org-directory "/agenda-files"))) 
#+end_src

I use the diary to bring stuff in from the MacOS iCal

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary t) 
  (setq diary-file (expand-file-name (concat dropbox-root "/diary"))) 
#+end_src 


#+name agenda-commands
#+begin_src emacs-lisp :eval no 
  (setq org-agenda-custom-commands
             '(("i" "Import diary from iCal" agenda ""
                ((org-agenda-mode-hook
                  (lambda ()
                    (org-mac-iCal)))))))
#+end_src

** My GTD setup

*** My Next Action list setup

#+name: next-actions
#+begin_src emacs-lisp

  (defun GTD ()
    "Go to my main GTD next action lists"
    (interactive)
    (find-file my/organizer))


  (setq org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING" . t) ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
         
  (setq org-log-into-drawer "LOGBOOK")
#+end_src

*** Categories as Areas of focus

I use David Allen's "Areas of Focus" for general categories across org stuff

#+begin_src emacs-lisp
  (setq org-global-properties
        '(("CATEGORY_ALL" 
           . "Family Finance Work Health Relationships Self Explore Other")))
  (setq org-columns-default-format "%35ITEM %TODO %3PRIORITY %20CATEGORY %TAGS") 
#+end_src 


*** Context in tags

My default tags should be context

#+BEGIN_SRC emacs-lisp
      (setq org-tag-persistent-alist
            '((:startgroup . nil)
              ("@Office" . ?o)
              ("@Computer" . ?c)
              ("@Internet" . ?i)
              ("@Home" . ?h)
              ("@Errands" . ?e)
              (:endgroup . nil)
              (:startgroup . nil)
              ("Project" . ?p)
              ("Agenda" . ?a)
              (:endgroup . nil)
              ("FLAGGED" . ?f)))

#+END_SRC

But project tags should never be inherited

#+BEGIN_SRC emacs-lisp
  (setq org-tags-exclude-from-inheritance '("Project"))
#+END_SRC
** Key bindings in Org

#+begin_src emacs-lisp
  (global-set-key (kbd "<f9>") 'GTD)
  (global-set-key (kbd "<f10>") 'org-cycle-agenda-files)
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  (define-key org-mode-map (kbd "C-c C-k") 'copy-region-as-kill)
  (define-key org-mode-map "\C-cl" 'org-store-link)
  (define-key org-mode-map "\C-ci" 'org-insert-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cj" 'org-clock-goto)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-c'" 'org-cycle-agenda-files)
  (define-key global-map "\C-cx"
    (lambda () (interactive) (org-capture nil "i")))

#+end_src

** Org capture behavior

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo items" entry (file+headline my/organizer "Unfiled Tasks")
           "* TODO %?\n  %i\n  %a")
          ("i" "Into the inbox" entry (file+datetree my/inbox)
           "* %?\n\nEntered on %U\n  %i\n  %a" )
          ("j" "Journal entries" entry (file+datetree my/journal)
           "* %?\n\nEntered on %U\n  %i\n  %a" )
          ("J" "Journal entries from nowhere" entry (file+datetree my/journal)
           "* %?\n\nEntered on %U\n  %i\n " )
          ))
#+end_src 
 
 
** Archiving and refiling

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path t
        org-refile-use-cache t)
       
  (setq org-refile-targets '((my/organizer :maxlevel . 2 )
                             (my/organizer :tag . "TAG" )
                             ))
#+end_src
  

** Yasnippet

This is yasnippet behavior, cribbed from emacswiki.  


#+begin_src emacs-lisp


          (yas-global-mode 1)
          (defun yas/minor-mode-off ()
            (interactive)
            (yas/minor-mode -1))

          (defun yas/minor-mode-on ()
            (interactive)
            (yas/minor-mode 1))
    (setq help-mode-hook nil)

    (use-package rainbow-delimiters
      :config
      (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


        ;;  (add-hook 'help-mode-hook 'yas/minor-mode-off)
        
        (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/gits")
        (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/mine")
      ;;  (yas-load-directory "~/.emacs.d/snippets/mine/latex-mode")
      ;;  (yas-load-directory "~/.emacs.d/snippets/gits/latex-mode")
      ;  (yas/load-directory "~/.emacs.d/snippets/gits/latex-mode/")
          
      
      
          
#+end_src


** LaTeX export 

I use LaTeX export a /lot/, and really want it to work well.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src

*** Minted listings

I much prefer the minted style of code listings over the listings
package.  It would be nice to use pygmentize instead of htmlize on
the back end of org-mode HTML export.  As it is I have a default
configuration string for minted that gets put in all my org LaTeX exports
   
#+begin_src emacs-lisp :tangle yes :eval yes
  (require 'ox-latex)
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("linenos" "false") 
          ("bgcolor" "gray!10")  ;; this is dependent on the color being defined
          ("stepnumber" "1")
          ("numbersep" "10pt")
          )
        )
  (setq my-org-minted-config (concat "%% minted package configuration settings\n"
                                     "\\usepackage{minted}\n"
                                     "\\definecolor{bg}{rgb}{0.97,0.97,0.97}\n" 
                                     "\\usemintedstyle{trac}\n"
                                     "\\usepackage{upquote}\n"
                                     "\\AtBeginDocument{%\n"
                                     "\\def\\PYZsq{\\textquotesingle}%\n"
                                     "}\n"
                                      ))
  
#+end_src

I need R source code highlighting, but *minted* only knows "r"

TODO 

#+begin_src emacs-lisp
  (add-to-list 'org-latex-minted-langs '(R "r"))
#+end_src

*** Different LaTeX engines

I want the option of running the three major LaTeX flavors
(pdflatex, xelatex, or lualatex) and have them all work.  LuaLaTeX is
my preferred default.

#+begin_src emacs-lisp
  (defun my-org-tex-cmd ()
    "set the correct type of LaTeX process to run for the org buffer"
    (let ((case-fold-search t))
      (if (string-match  "^#\\+LATEX_CMD:\s+\\(\\w+\\)"   
                         (buffer-substring-no-properties (point-min) (point-max)))
          (downcase (match-string 1 (buffer-substring-no-properties (point-min) (point-max))))
        "lualatex"
      ))
    )
#+end_src

I use ~latexmk~ to generate the PDF, depending on the engine

#+begin_src emacs-lisp :eval yes :tangle yes
   (setq org-latex-hyperref-template nil)
    (defun set-org-latex-pdf-process (backend)
      "When exporting from .org with latex, automatically run latex,
       pdflatex, or xelatex as appropriate, using latexmk."
      (setq org-latex-pdf-process
            (list (concat "latexmk -pdflatex='" 
                          (my-org-tex-cmd)
                          " -shell-escape -interaction nonstopmode' -pdf -f  %f" ))))
    (add-hook 'org-export-before-parsing-hook 'set-org-latex-pdf-process)
#+end_src

*** Default packages 

The Org source warns against changing the value of 
~org-export-latex-default-packages-alist~, but it also includes
~inputenc~ and ~fontenc~ for font and character selection, which are
really for pdflatex, not xelatex and lualatex.

#+name: auto-tex-packages 
#+begin_src emacs-lisp
  (setq org-latex-default-packages-alist
        '(("" "fixltx2e" nil)
          ("" "longtable" nil)
;          ("" "floatrow" nil)
          ("" "graphicx" t)
          ("" "wrapfig" nil)
          ("" "soul" t)
          ("" "csquotes" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "latexsym" t)
          ("" "tabularx" nil)
          ("" "booktabs" nil)
          ("" "xcolor" nil)
          "\\tolerance=1000"
          )
        )
#+end_src

*** My export packages

I move the ~fontenc~/~fontspec~ package to engine-specific choices,
and load ~hyperref~ after them, along with my ~minted~ code listing options.

#+begin_src emacs-lisp
    (defun my-auto-tex-packages (backend)
      "Automatically set packages to include for different LaTeX engines"
      (let ((my-org-export-latex-packages-alist 
             `(("pdflatex" . (("AUTO" "inputenc" t)
                              ("T1" "fontenc" t)
                              ("" "textcomp" t)
                              ("" "varioref"  nil)
  ;                            ("hidelinks" "hyperref"  nil)
  ;                            ("capitalize,noabbrev" "cleveref"  nil)
                              ,my-org-minted-config))
               ("xelatex" . (("" "url" t)
                             ("no-math" "fontspec" t)
                             ("" "xltxtra" t)
                             ("" "xunicode" t)
                              ("" "varioref"  nil)
                              ("" "hyperref"  nil)
                              ("capitalize,noabbrev" "cleveref"  nil)
                             ,my-org-minted-config ))
               ("lualatex" . (("" "url" t)
                           ("" "fontspec" t)
                              ("" "varioref"  nil)
                              ("hidelinks" "hyperref"  nil)
                              ("capitalize,noabbrev" "cleveref"  nil)
                           ,my-org-minted-config ))
               ))
            (which-tex (my-org-tex-cmd)))
        (if (car (assoc which-tex my-org-export-latex-packages-alist))
            (setq org-latex-packages-alist 
                  (cdr (assoc which-tex my-org-export-latex-packages-alist)))
          (warn "no packages")
          )
        )
      )
    (add-hook 'org-export-before-parsing-hook 'my-auto-tex-packages 'append)
    
    (unless (boundp 'org-export-latex-classes)
      (setq org-export-latex-classes nil))
    
#+end_src

#+RESULTS:

*** LaTeX export classes

#+begin_src emacs-lisp
          (setq org-latex-classes
                          `(("memoir-article"
                                  (,@ (concat  "\\documentclass[11pt,article,oneside,a4paper,x11names]{memoir}\n"
                                               "% -- DEFAULT PACKAGES \n[DEFAULT-PACKAGES]\n"
                                               "% -- PACKAGES \n[PACKAGES]\n"
                                               "% -- EXTRA \n[EXTRA]\n"
                                               "\\counterwithout{section}{chapter}\n"
                                               ))
                                  ("\\section{%s}" . "\\section{%s}")
                                  ("\\subsection{%s}" . "\\subsection{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph{%s}"))
                            ("memoir"
                                  (,@ (concat  "\\documentclass[11pt,oneside,a4paper,x11names]{memoir}\n"
                                                "\\let\\newfloat\\undefined\n"
                                               "% -- DEFAULT PACKAGES \n[DEFAULT-PACKAGES]\n"
                                               "% -- PACKAGES \n[PACKAGES]\n"
                                               "% -- EXTRA \n[EXTRA]\n"
                                               "\\counterwithout{section}{chapter}\n"
                                               ))
                                  ("\\chapter{%s}" . "\\chapter{%s}")
                                  ("\\section{%s}" . "\\section{%s}")
                                  ("\\subsection{%s}" . "\\subsection{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph{%s}"))
                            ("article"
                                  (,@ (concat  "\\documentclass[11pt,oneside,a4paper,x11names]{article}\n"
                                               "% -- DEFAULT PACKAGES \n[DEFAULT-PACKAGES]\n"
                                               "% -- PACKAGES \n[PACKAGES]\n"
                                               "% -- EXTRA \n[EXTRA]\n"
                                               ))
                                  ("\\section{%s}" . "\\section{%s}")
                                  ("\\subsection{%s}" . "\\subsection{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph{%s}"))
                            ("book"
                             (,@ (concat  "\\documentclass[]{book}\n"
                                          "% -- DEFAULT PACKAGES \n[DEFAULT-PACKAGES]\n"
                                          "% -- PACKAGES \n[PACKAGES]\n"
                                          "% -- EXTRA \n[EXTRA]\n"
                                          ))
                             ("\\chapter{%s}" . "\\chapter{%s}")
                             ("\\section{%s}" . "\\section{%s}")
                             ("\\subsection{%s}" . "\\subsection{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection{%s}"))
                            ("handout"
                                  (,@ (concat  "\\documentclass[oneside,a4paper,]{tufte-handout}\n"
                                               "% -- DEFAULT PACKAGES \n[DEFAULT-PACKAGES]\n"
                                               "% -- PACKAGES \n[PACKAGES]\n"
                                               "% -- EXTRA \n[EXTRA]\n"
                                               ))
                                  ("\\section{%s}" . "\\section{%s}")
                                  ("\\subsection{%s}" . "\\subsection{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph{%s}"))
                            )
                          )

        (add-to-list 'org-latex-classes '("tufte-handout"
                                                  "\\documentclass[11pt,a4paper,x11names]{tufte-handout}\n"
                                                  ("\\section{%s}" . "\\section{%s}")
                                                  ("\\subsection{%s}" . "\\subsection{%s}")
                                                  ) 'append)

        (require 'ox-beamer)
        (add-to-list 'org-latex-classes
                     '("beamer"
                       "\\documentclass\[presentation\]\{beamer\}"
                       ("\\section\{%s\}" . "\\section\{%s\}")
                       ("\\subsection\{%s\}" . "\\subsection\{%s\}")
                       ("\\subsubsection\{%s\}" . "\\subsubsection\{%s\}")))

        (defun my-beamer-bold (contents backend info)
          (when (eq backend 'beamer)
            (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

        (defun my-beamer-caption (contents backend info)
          (when (eq backend 'beamer)
            (replace-regexp-in-string "\\\\caption\{" "\\\\caption*{" contents)))

        (defun my-beamer-figure (contents backend info)
          (when (eq backend 'beamer)
            (replace-regexp-in-string "\\\\begin\{figure\}\\[\\w+\\]" 
  "" contents)))


        (defvar gtk/org-latex-export-caption-num nil)


        (defun gtk/latex-export-caption-number-maybe (contents backend info)
          (when (eq backend 'latex)
            (if gtk/org-latex-export-caption-num
                (replace-regexp-in-string "\\\\caption\{" "\\\\caption*{" contents)
              contents)))

      (add-to-list 'org-export-filter-final-output-functions 'gtk/latex-export-caption-number-maybe)

      (defun my-latex-ref-to-cref (contents backend info)
        "Org export filter to allow use cref in latex org export. Require use of cleveref"
         (when (eq backend 'latex) (replace-regexp-in-string "\\\\ref\{" "\\\\cref{" contents)))

        (add-to-list 'org-export-filter-final-output-functions 'my-beamer-caption)
        (add-to-list 'org-export-filter-final-output-functions 'my-beamer-figure)
      (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)

      (add-to-list 'org-export-filter-final-output-functions 'my-latex-ref-to-cref)

        (setq org-export-allow-bind-keywords 't)
#+end_src

#+RESULTS:
: t

*** Removing captions in Beamer

Org mode latex export uses \\caption  for all Figures and tables.  In
Beamer, I don't want these numbered, so want to use the caption
package and convert everything to \\caption.  This does it, if I bind
it to ~org-export-latex-final-hook~

This is probably going to need revision for version 8.0, to use the filter system

#+BEGIN_SRC emacs-lisp
  (defun latex-buffer-caption-to-caption* ()
    (when org-beamer-export-is-beamer-p
      (replace-regexp "\\(\\\\caption\\)\\([[{]\\)" "\\1*\\2" nil
    (point-min)   (point-max)))
  )
  (add-hook 'org-export-latex-final-hook
            'latex-buffer-caption-to-caption* 'append)

#+END_SRC









** File applications

The variable org-file

* RefTeX

#+begin_src emacs-lisp :tangle no 
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

(setq TeX-view-program-selection
      '((output-dvi "DVI Viewer")
        (output-pdf "PDF Viewer")
        (output-html "Google Chrome")))
(setq TeX-view-program-list
      '(("DVI Viewer" "evince %o")
        ("PDF Viewer" "open %o")
        ("Google Chrome" "google-chrome %o")))

(setq reftex-plug-into-AUCTeX t)
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation))
(add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+end_src

** Org Babel


#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (dot . t)
     (ruby . t)
     (python . t)  ;; requires return statement
     (sh . t)
     (perl . t)
     (ledger . t)
     (latex . t)
     (clojure . t)  ;; oh, why doesn't this work?
     )
   )
#+end_src


** Org visuals
#+begin_src emacs-lisp
    (setq org-attach-method 'ln)
    
    (setq org-use-property-inheritance '("PRIORITY" "STYLE"))
    (setq org-agenda-dim-blocked-tasks 't)
    
    (defun org-column-view-uses-fixed-width-face ()
      ;; copy from org-faces.el
      (when (fboundp 'set-face-attribute)
        ;; Make sure that a fixed-width face is used when we have a column
        ;; table.
        (set-face-attribute 'org-column nil
                            :height (face-attribute 'default :height)
                            :family (face-attribute 'default :family))
        (set-face-attribute 'org-column-title nil
                            :height (face-attribute 'default :height)
                            :family (face-attribute 'default :family)
                            )))
    
  (setq org-fontify-done-headline t)
  
  (custom-set-faces
   '(org-done ((t (:foreground "PaleGreen"   
                   :weight normal
                   :strike-through t))))
   '(org-headline-done 
              ((((class color) (min-colors 16) (background dark)) 
                 (:foreground "LightSalmon" :strike-through nil)))))
  
    (when (and (fboundp 'daemonp) (daemonp))
      (add-hook 'org-mode-hook 'org-column-view-uses-fixed-width-face))
    (add-hook 'org-mode-hook 'org-column-view-uses-fixed-width-face)
    
#+end_src

** TODO Task Juggler
#+begin_src emacs-lisp :eval no :tangle no

      (setq org-export-taskjuggler-project-tag "taskjuggler_project")
      (setq org-export-taskjuggler-default-reports '("include
      \"ganttexport.tji\""))

#+end_src


** Link types

I add a few link types to make things look more readable when doing
editing of documents.

A citation link

#+begin_src emacs-lisp
    (org-add-link-type 
     "cite" nil
     (lambda (path desc format)
       (cond
        ((eq format 'html)
         (if (string-match "\(\\(.*\\)\)" desc)
             (format "(<cite>%s</cite>)" (match-string 1 desc))      
           (format "<cite>%s</cite>" desc)
           )
         )
        ((eq format 'latex)
         (format "\\cite{%s}" path)))))

    (org-add-link-type 
     "TERM" nil
     (lambda (path desc format)
       (cond
        ((eq format 'html)
         path
         )
        ((eq format 'latex)
         (format "%s\\nomenclature{%s}{%s}" desc path desc)))))
    
    (org-add-link-type 
     "Figure" nil
     (lambda (path desc format)
       (cond
        ((eq format 'html)
         path
         )
        ((eq format 'latex)
         (format "Figure~\\ref{fig:%s}" path)))))
    
    (org-add-link-type 
     "Table" nil
     (lambda (path desc format)
       (cond
        ((eq format 'html)
         path
         )
        ((eq format 'latex)
         (format "Table~\\ref{tbl:%s}" path)))))
    
#+end_src       


** Pre-processing hooks for export

#+begin_src emacs-lisp
  
  (defun my/org-export-ignoreheadings-hook (backend)
    "My backend aware export preprocess hook."
    (save-excursion
      (let* ((tag "ignoreheading"))
        (org-map-entries (lambda ()
                           (delete-region (point-at-bol) (point-at-eol)))
                         (concat ":" tag ":")))
      ))
  
  (setq org-export-before-processing-hook 'my/org-export-ignoreheadings-hook)
  
#+end_src





** Publishing

#+begin_src emacs-lisp
    (let ((publishing-dir (expand-directory-name (concat dropbox-root "Public"))))
      (setq org-publish-project-alist
            `(("public"
               :base-directory ,user-emacs-directory
               :base-extension "org"
               :publishing-directory ,publishing-dir
               :publishing-function org-publish-org-to-html
               )
              ("FOS"
               :base-directory ,(expand-directory-name (concat dropbox-root "/_support/DBS/FOS-web"))
               :base-extension "org\\|css"
;;               :publishing-directory ,(expand-directory-name (concat dropbox-root "/_support/DBS/FOS-web/target"))
               :publishing-directory "/ftp:dbsgtk@staff.science.nus.edu.sg:/home/"
               :publishing-function org-publish-org-to-html
               ))))
  
#+end_src

** Org2blog                                                       :noexport:

Naturally, I first learned about [[https://github.com/punchagan/org2blog][org2blog]] from Sacha Chua's
[[http://sachachua.com/blog/][blog]]. Sacha's notes on her own [[http://dl.dropbox.com/u/3968124/sacha-emacs.html][configuration]] seem to indicate she
doesn't use it any more, but has switched to a different one in ELPA.
I'm not sure what I'm missing here, since the org2blog in ELPA is
still the same as the one from punchagan.

#+begin_src emacs-lisp :tangle no :eval no
       (require 'org2blog-autoloads)
       (require 'org2blog)
#+end_src

I added a feature to org2blog to allow mapping of Org source code
blocks to WP shortcode blocks to WP can handle the syntax highlighting
properly. This has a new ~defcustom~ called
=org2blog/wp-shortcode-langs-map= that maps, by default, emacs-lisp to
lisp and R to r.  So emacs-lisp source code blocks will be pretty
formatted by the lisp formatter if the lisp SyntaxHighlighter brush is
installed on WordPress. punchagan accepted this on the github version.
I wonder when this will show up in the ELPA version?

The code below is because some additional brushes are installed in my
WordPress

#+begin_src emacs-lisp :tangle no :eval no
;;       (add-to-list 'org2blog/wp-sourcecode-langs "clojure")
       (add-to-list 'org2blog/wp-sourcecode-langs "r")
       (add-to-list 'org2blog/wp-sourcecode-langs "lisp")
       (add-to-list 'org2blog/wp-sourcecode-langs "html")
       (setq org2blog/wp-use-sourcecode-shortcode t)
       (setq org2blog/wp-sourcecode-default-params nil)
#+end_src


** Slides

I've been playing with making Slidy slides from org.
#+begin_src emacs-lisp
;;   (require 'org-htmlslidy)
#+END_SRC






** Let's use Sacha Chua's css for HTML export, since it looks purty

#+begin_src emacs-lisp :tangle no

(setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"http://sachachua.com/blog/wp-content/themes/sacha-v3/style.css\" />
<link rel=\"stylesheet\" type=\"text/css\" href=\"http://sachachua.com/org-export.css\" />")
(setq org-export-html-preamble "<div class=\"org-export\">")
(setq org-export-html-postamble "</div>")
(setq org-src-fontify-natively t)
(setq org-export-html-style nil)
#+end_src






* R

#+name: R and ess
#+begin_src emacs-lisp

  (use-package ess-site
    :defer nil
    :mode ("\\.R\\'" . R-mode)
    :init
    (progn 
      (setq-default ess-language "R")
      (require 'r-autoyas)
      (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
      ;(add-hook 'inferior-ess-mode-hook 'turn-off-auto-complete 'append)
      ;(delq 'turn-off-auto-complete inferior-ess-mode-hook)
      ;(add-hook 'ess-mode-hook 'turn-off-auto-complete 'append)
      (add-to-list 'ess-style-alist
                   '(my-style
                     (ess-indent-level . 4)
                     (ess-first-continued-statement-offset . 2)
                     (ess-continued-statement-offset . 0)
                     (ess-brace-offset . -4)
                     (ess-expression-offset . 4)
                     (ess-else-offset . 0)
                     (ess-close-brace-offset . 0)
                     (ess-brace-imaginary-offset . 0)
                     (ess-continued-brace-offset . 0)
                     (ess-arg-function-offset . 4)
                     (ess-arg-function-offset-new-line . '(4))
                     ))
      (setq ess-default-style 'my-style)
      (setq ess-smart-S-assign-key ";")
      (ess-toggle-S-assign nil)
      (ess-toggle-S-assign nil)
      (ess-toggle-underscore nil)))


 (use-package polymode 
      :ensure t
      :mode
      ("\\.Snw" . poly-noweb+r-mode)
      ("\\.Rnw" . poly-noweb+r-mode)
      ("\\.Rmd" . poly-markdown+r-mode))
#+end_src



* Mac specific stuff

#+begin_src emacs-lisp
  
  (when (getenv "ORG_HOME")
    (let ((org-contrib-dir (expand-file-name "contrib/lisp" (getenv "ORG_HOME"))))
      (when (file-directory-p org-contrib-dir)
        (add-to-list 'load-path org-contrib-dir)
        )))
#+end_src

This (including the comment below) is from
http://orgmode.org/worg/org-contrib/org-mac-iCal.html

#+begin_quote
A common problem with all-day and multi-day events in org agenda view
is that they become separated from timed events and are placed below
all TODO items.  Likewise, additional fields such as Location: are
orphaned from their parent events. The following hook will ensure that
all events are correctly placed in the agenda.
#+end_quote

#+begin_src emacs-lisp
  (defun org-agenda-cleanup-diary-long-events ()
    (goto-char (point-min))
    (save-excursion
      (while (re-search-forward "^[a-z]" nil t)
        (goto-char (match-beginning 0))
        (insert "0:00-24:00 ")))
    (while (re-search-forward "^ [a-z]" nil t)
      (goto-char (match-beginning 0))
      (save-excursion
        (re-search-backward "^[0-9]+:[0-9]+-[0-9]+:[0-9]+ " nil t))
      (insert (match-string 0))))
  (add-hook 'org-agenda-cleanup-fancy-diary-hook 'org-agenda-cleanup-diary-long-events)
#+end_src       



* Git


#+begin_src emacs-lisp
  (require 'gist)

  ;; (use-package magit-gitflow
  ;;   :config
  ;;   (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)) 

  ;; (require 'git-gutter)
  ;;(global-git-gutter-mode -1)
#+end_src


* Essh

#+BEGIN_SRC emacs-lisp
  (use-package essh
    :config
    (bind-keys :map sh-mode-map
               ("C-c C-r" . pipe-region-to-shell)        
               ("C-c C-b" . pipe-buffer-to-shell)        
               ("C-c C-j" . pipe-line-to-shell)          
               ("C-c C-n" . pipe-line-to-shell-and-step) 
               ("C-c C-f" . pipe-function-to-shell)      
               ("C-c C-d" . shell-cd-current-directory)))
#+END_SRC


* Other exporters

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC


* elpy

I had to remove cython and yasnippet extensions to not screw up
org-mode.

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (defun gtk/elpy-send-line-or-region ()
    (interactive)
    (if (region-active-p)
        (call-interactively 'elpy-shell-send-region-or-buffer)
      (let ((region (elpy-shell--region-without-indentation
                     (line-beginning-position) (line-end-position))))
        (when (string-match "\t" region)
          (warn (format-message
                 "%s (%d): line or region contained tabs, this might cause weird errors"
                 (buffer-name)
                 (line-number-at-pos))))
        (python-shell-send-string region)
        (next-line))))

  (elpy-use-ipython)
  (setq python-shell-interpreter "ipython3" python-shell-interpreter-args "--simple-prompt --pprint")
  (bind-keys :map elpy-mode-map
             ("C-c C-n" . gtk/elpy-send-line-or-region)
             ("C-c n" . elpy-flymake-next-error))
             

  (add-to-list 'python-shell-completion-native-disabled-interpreters "python3")
  (global-hl-line-mode t)


  (use-package expand-region
    :config
    (bind-key "C-=" 'er/expand-region))
#+END_SRC




* Auto complete or company 

#+BEGIN_SRC emacs-lisp :eval yes
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :eval no :tangle no
          
        ;(require 'auto-complete-config)
        ;(setq ac-source-yasnippet nil)
        ;(ac-config-default)
        ;(global-auto-complete-mode -1)



    
  (define-key ac-completing-map (kbd "C-n") 'ac-next)
  (define-key ac-completing-map (kbd "C-p") 'ac-previous)
  (define-key ac-completing-map "\r" 'ac-complete)
  (define-key ac-completing-map [return] 'ac-complete)
  (define-key ac-completing-map [tab] 'ac-complete)


  (defun turn-on-auto-complete ()
    "turn on auto-complete"
    (interactive)
    (auto-complete-mode 1))

  (defun turn-off-auto-complete ()
    "turn off auto-complete"
    (interactive)
    (auto-complete-mode -1))

  (defadvice ac-common-setup
    (after give-yasnippet-highest-priority activate)
    "Make sure that yasnippet is at the top of the list for all auto-complete sources "
    (setq ac-sources (delq 'ac-source-yasnippet ac-sources))
    (add-to-list 'ac-sources 'ac-source-yasnippet))

  (add-hook 'org-mode-hook 'turn-on-auto-complete)            
            
#+END_SRC



* multiple cursors

#+BEGIN_SRC emacs-lisp

  (use-package multiple-cursors
    :config
    (bind-keys
     ("C-M-c"    . mc/edit-lines)
     ("C->"      . mc/mark-next-like-this)
     ("C-<"      . mc/mark-previous-like-this)
     ("C-c C-<"  .  mc/mark-all-like-this)))

#+END_SRC



* Mac path stuff

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
(setq load-path (remove "~/.emacs.d/" load-path))
#+END_SRC


* Ledger

#+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.lgr\\'" . ledger-mode))
 (add-hook 'ledger-mode-hook 'yas/minor-mode-off)
#+END_SRC


* Draft

#+BEGIN_SRC emacs-lisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "google-chrome %s")
          ("\\.pdf\\'" . "evince \"%s\"")
          ("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")))
#+END_SRC
